<?php

namespace App\Models;

use App\Models\User;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;

/**
 * App\Models\StoreTransferRequest
 *
 * @property int $id
 * @property int|null $sender_id
 * @property int|null $distributor_id
 * @property int $is_confirmed
 * @property \Illuminate\Support\Carbon|null $created_at
 * @property \Illuminate\Support\Carbon|null $updated_at
 * @property \Illuminate\Support\Carbon|null $deleted_at
 * @property int|null $sender_store_id
 * @property int|null $distributor_store_id
 * @property string|null $signature
 * @property-read User|null $distributor
 * @property-read \App\Models\Store|null $distributor_store
 * @property-read \Illuminate\Database\Eloquent\Collection|\App\Models\ProductQuantity[] $productQuantities
 * @property-read int|null $product_quantities_count
 * @property-read \Illuminate\Database\Eloquent\Collection|\App\Models\AttachedProducts[] $products
 * @property-read int|null $products_count
 * @property-read \App\Models\Store $receiver_store
 * @property-read User|null $sender
 * @property-read \App\Models\Store|null $sender_store
 * @method static \Illuminate\Database\Eloquent\Builder|StoreTransferRequest newModelQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|StoreTransferRequest newQuery()
 * @method static \Illuminate\Database\Query\Builder|StoreTransferRequest onlyTrashed()
 * @method static \Illuminate\Database\Eloquent\Builder|StoreTransferRequest query()
 * @method static \Illuminate\Database\Eloquent\Builder|StoreTransferRequest whereCreatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|StoreTransferRequest whereDeletedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|StoreTransferRequest whereDistributorId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|StoreTransferRequest whereDistributorStoreId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|StoreTransferRequest whereId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|StoreTransferRequest whereIsConfirmed($value)
 * @method static \Illuminate\Database\Eloquent\Builder|StoreTransferRequest whereSenderId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|StoreTransferRequest whereSenderStoreId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|StoreTransferRequest whereSignature($value)
 * @method static \Illuminate\Database\Eloquent\Builder|StoreTransferRequest whereUpdatedAt($value)
 * @method static \Illuminate\Database\Query\Builder|StoreTransferRequest withTrashed()
 * @method static \Illuminate\Database\Query\Builder|StoreTransferRequest withoutTrashed()
 * @mixin \Eloquent
 */
class StoreTransferRequest extends Model
{
    use SoftDeletes;

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        static::creating(function (StoreTransferRequest $storeTransferRequest) {
            $storeTransferRequest->signature = \Str::random(5);
        });
    }


    protected $fillable = ['sender_id',
        'distributor_id', 'is_confirmed', 'sender_store_id', 'distributor_store_id', 'signature'
    ];

    public function sender()
    {
        return $this->belongsTo(User::class, 'sender_id')->withDefault(new User);
    }

    public function distributor()
    {
        return $this->belongsTo(User::class, 'distributor_id')->withDefault(new User);
    }

    public function productQuantities()
    {
        return $this->hasMany(ProductQuantity::class, 'store_transfer_request_id');
    }

    public function products()
    {
        return $this->morphMany(AttachedProducts::class, 'model');
    }

    public function distributor_store()
    {
        return $this->belongsTo(Store::class, 'distributor_store_id')->withDefault(new Store);
    }

    public function receiver_store()
    {
        return $this->belongsTo(Store::class, 'receiver_store_id')->withDefault(new Store);
    }

    public function sender_store()
    {
        return $this->belongsTo(Store::class, 'sender_store_id')->withDefault(new Store);
    }

    public function confirmRequest()
    {
        if ($this->sender_store_id != null) {
            $products = $this->products;
            $this->productQuantities()->update(['is_confirmed' => 1]);
            foreach ($products as $product) {
                ProductQuantity::create([
                    'product_id' => $product->product_id,
                    'user_id' => $this->distributor_id,
                    'quantity' => $product->quantity,
                    'type' => 'in',
                    'is_confirmed' => 1,
                    'store_id' => $this->distributor_store_id,
                    'store_transfer_request_id' => $this->id
                ]);
            }
        }
        $this->update(['is_confirmed' => 1]);
    }
}
